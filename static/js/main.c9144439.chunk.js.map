{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","React","lazy","SeventyPercentRestroCafeHome","BiryaniMansion","SeventyPercentDiet","SeventyPercentMarinations","Blog","Contact","SingleBlog","Menu","window","isOnline","App","Suspense","fallback","exact","path","name","render","props","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAGMA,EAAOC,IAAMC,MAAK,kBAAM,uDACxBC,EAA+BF,IAAMC,MAAK,kBAAM,wDAChDE,EAAiBH,IAAMC,MAAK,kBAAM,wDAClCG,EAAqBJ,IAAMC,MAAK,kBAAM,wDACtCI,EAA4BL,IAAMC,MAAK,kBAAM,wDAC7CK,EAAON,IAAMC,MAAK,kBAAM,iCACxBM,EAAUP,IAAMC,MAAK,kBAAM,uDAC3BO,EAAaR,IAAMC,MAAK,kBAAM,iCAC9BQ,EAAOT,IAAMC,MAAK,kBAAM,iCAE9BS,OAAOC,UAAW,EAqBHC,MApBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,+BACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAO,EAAMC,KAAK,IAAIC,KAAK,OAAOC,OAAQ,SAAAC,GAAK,OAAI,kBAACpB,EAASoB,MACpE,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,sBAAsBC,KAAK,iBAAiBC,OAAQ,SAAAC,GAAK,OAAI,kBAACjB,EAAiCiB,MACxH,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,kBAAkBC,KAAK,iBAAiBC,OAAQ,SAAAC,GAAK,OAAI,kBAAChB,EAAmBgB,MACtG,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,sBAAsBC,KAAK,qBAAqBC,OAAQ,SAAAC,GAAK,OAAI,kBAACf,EAAuBe,MAClH,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,6BAA6BC,KAAK,4BAA4BC,OAAQ,SAAAC,GAAK,OAAI,kBAACd,EAA8Bc,MACvI,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,WAAWC,KAAK,OAAOC,OAAQ,SAAAC,GAAK,OAAI,kBAACb,EAASa,MAC3E,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,WAAWC,KAAK,UAAUC,OAAQ,SAAAC,GAAK,OAAI,kBAACZ,EAAYY,MACjF,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,QAAQC,KAAK,QAAQC,OAAQ,SAAAC,GAAK,OAAI,kBAACX,EAAeW,MAC/E,kBAAC,IAAD,CAAOJ,OAAO,EAAMC,KAAK,QAAQC,KAAK,OAAOC,OAAQ,SAAAC,GAAK,OAAI,kBAACV,EAASU,UCf9DC,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c9144439.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nconst Home = React.lazy(() => import('./Components/Home'));\nconst SeventyPercentRestroCafeHome = React.lazy(() => import('./Components/Home/SeventyPercentRestroCafeHome'));\nconst BiryaniMansion = React.lazy(() => import('./Components/Home/BiryaniMansion'));\nconst SeventyPercentDiet = React.lazy(() => import('./Components/Home/SeventyPercentDiet'));\nconst SeventyPercentMarinations = React.lazy(() => import('./Components/Home/SeventyPercentMarinations'));\nconst Blog = React.lazy(() => import('./Components/Blog/blog'));\nconst Contact = React.lazy(() => import('./Components/Pages/Contact'));\nconst SingleBlog = React.lazy(() => import('./Components/Blog/singleBlog'));\nconst Menu = React.lazy(() => import('./Components/Pages/Menu'));\n\nwindow.isOnline = true;\nfunction App() {\n  return (\n    <BrowserRouter>\n      <React.Suspense fallback={<div></div>}>\n        <Switch>\n          <Route exact={true} path=\"/\" name=\"Home\" render={props => <Home {...props} />} />\n          <Route exact={true} path=\"/seventyPercentCafe\" name=\"seventyPercent\" render={props => <SeventyPercentRestroCafeHome {...props} />} />\n          <Route exact={true} path=\"/biryaniMansion\" name=\"biryaniMansion\" render={props => <BiryaniMansion {...props} />} />\n          <Route exact={true} path=\"/seventyPercentDiet\" name=\"seventyPercentDiet\" render={props => <SeventyPercentDiet {...props} />} />\n          <Route exact={true} path=\"/seventyPercentMarinations\" name=\"seventyPercentMarinations\" render={props => <SeventyPercentMarinations {...props} />} />\n          <Route exact={true} path=\"/stories\" name=\"blog\" render={props => <Blog {...props} />} />\n          <Route exact={true} path=\"/contact\" name=\"contact\" render={props => <Contact {...props} />} />\n          <Route exact={true} path=\"/blog\" name=\"blog1\" render={props => <SingleBlog {...props} />} />\n          <Route exact={true} path=\"/menu\" name=\"menu\" render={props => <Menu {...props} />} />\n        </Switch>\n      </React.Suspense>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}